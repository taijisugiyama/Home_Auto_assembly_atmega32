.ORG 0X00
JMP MAIN
.ORG URXCaddr
JMP RXISR
.ORG ADCCaddr 
JMP ADCISR
MAIN:
/*********++++++ PORTD FOR THE OUTPUT OF BLUETOOTH TO CONTROL THE APPLIANCES**** ++++R20-------------*/
LDI R20,0XFF
OUT DDRC,R20
/*---R20*****+++++++++++++++++++ PORTA AND PORTB ARE USING IN LCD INTIALIZATION++++++++++++++++*/
 .equ LCD_PRT = PORTB
 .equ LCD_DDR = DDRB
 .equ LCD_PIN = PINB
 .equ LCD_RS = 0
 .equ LCD_RW = 1
 .equ LCD_EN = 2
/*************STACK INTIALIZATION*****************/
LDI R21,HIGH(RAMEND)
OUT SPH,R21
LDI R21,LOW(RAMEND)
OUT SPL,R21
SBI PORTC,0
SBI PORTC,3
CALL SERIALCOM_init
call LCD_Init   
/**********************DOING THE MAIN TASKS*************/
LDI R16, 'F'
CALL DATAWRT
LDI R16, 'A'
CALL DATAWRT
LDI R16, 'S'
CALL DATAWRT
LDI R16,'T'
CALL DATAWRT 
/********************** FOR SENSOR******************/
LDI R16,0X00
OUT PORTA,R16/* AS THE CHANNEL IS ALL FROM PORTA THEN MAKE ALL OF IS PINS TO INPUT PIN*/
LDI R16,0X8F/* ENABLING THE ADC AND STTING THE PRESCALAR CK/128 AND SETTING UP THE INTRUPT 1000 1111*/
OUT ADCSRA,R16
LDI R16,225 /*PUTTING THE BUILDIN VREF from the ref pin AND PRESCALAR OF CLK/1024*/
OUT ADMUX,R16
A1:
JMP A1
LCD_Init:    
			LDI R21,0xFF
			OUT LCD_DDR, R21
			LDI R16, 0x33
			CALL CMNDWRT
			CALL DELAY_2ms
			LDI R16, 0x32
			CALL CMNDWRT
			CALL DELAY_2ms
			LDI R16, 0x28
			CALL CMNDWRT
			CALL DELAY_2ms
			LDI R16, 0x0E
			CALL CMNDWRT
			CALL DELAY_2ms
			LDI R16, 0x01
			CALL CMNDWRT
			CALL DELAY_2ms
			LDI R16, 0x06
			CALL CMNDWRT
			RET



CMNDWRT:	
			MOV R27, R16
			ANDI R27, 0xF0
			IN R26, LCD_PRT
			ANDI R26, 0x0F
			OR R26, R27

			OUT LCD_PRT, R26
			CBI LCD_PRT, LCD_RS
			CBI LCD_PRT, LCD_RW
			SBI LCD_PRT, LCD_EN
			CALL SDELAY
			CBI LCD_PRT, LCD_EN
			CALL DELAY_2ms

			MOV R27, R16
			SWAP R27
			ANDI R27, 0xF0
			IN R26, LCD_PRT
			ANDI R26, 0x0F
			OR R26, R27
			OUT LCD_PRT, R26
			SBI LCD_PRT, LCD_EN
			CALL SDELAY
			CBI LCD_PRT, LCD_EN
			CALL DELAY_2ms
			RET


			
DATAWRT:	


			MOV R27, R16
			ANDI R27, 0xF0
			IN R26, LCD_PRT
			ANDI R26, 0x0F
			OR R26, R27

			OUT LCD_PRT, R26
			SBI LCD_PRT, LCD_RS
			CBI LCD_PRT, LCD_RW
			SBI LCD_PRT, LCD_EN
			CALL SDELAY
			CBI LCD_PRT, LCD_EN
			CALL DELAY_2ms

			MOV R27, R16
			SWAP R27
			ANDI R27, 0xF0
			IN R26, LCD_PRT
			ANDI R26, 0x0F
			OR R26, R27
			OUT LCD_PRT, R26
			SBI LCD_PRT, LCD_EN
			CALL SDELAY
			CBI LCD_PRT, LCD_EN
			CALL DELAY_2ms
			RET


DELAY_2ms:  
			PUSH R16
			PUSH R17
			LDI R16, 100
LOOP1:      LDI R17,100
LOOP0:      DEC R17
			BRNE LOOP0
			DEC R16
			BRNE LOOP1
			POP R17
			POP R16
			RET
				SDELAY: NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		RET
		

RXISR:
AGAIN:
SBIS UCSRA,RXC/* NEW DATA RECEIVED */
JMP AGAIN
/*********************++++++++++++++R20*/
IN R16,UDR
CALL DATAWRT 
/********** CHECKING FOR TEMPERATURE********/
LDI R20,'T'
CP R16,R20
BRNE NTTEMP
LDI R16,'S'
CALL TRANSMIT  
SBI ADCSRA,ADSC/* ENABLE THE CONVERSION OR START CONVERSION*/
RETI
NTTEMP:

/****************CHECKING FOR 0****************/
LDI R20,'0'
CP R16,R20
BRNE CP0
SBI PORTC,0
RETI
CP0:
LDI R20,'1'
CP R16,R20
BRNE CP1
SBI PORTC,1
LDI R16,'M'
CALL TRANSMIT 
RETI
CP1:
LDI R20,'2'
CP R16,R20
BRNE CP2
SBI PORTC,2
LDI R16,'R'
CALL TRANSMIT 
RETI
CP2:
LDI R20,'3'
CP R16,R20
BRNE CP3
SBI PORTC,3
RETI
CP3:
LDI R20,'4'
CP R16,R20
BRNE CP4
CBI PORTC,0
RETI
CP4:
LDI R20,'5'
CP R16,R20
BRNE CP5
CBI PORTC,1
RETI
CP5:
LDI R20,'6'
CP R16,R20
BRNE CP6
CBI PORTC,2
RETI
CP6:
LDI R20,'7'
CP R16,R20
BRNE CP7
CBI PORTC,3
RETI
CP7:
LDI R20,'8'
CP R16,R20
BRNE CP8
CBI PORTC,0
RETI
CP8:
RETI
 DELAY:
 LDI R20,0XFC
 LDI R21,0XF3
 OUT TCNT1H,R20
 OUT TCNT1L,R21
 LDI R20,5
 LDI R21,0X00
 OUT TCCR1A,R21
 OUT TCCR1B,R20
 AGAIN22:
 IN R20,TIFR 
 SBRS R20,TOV1
 JMP AGAIN22
 LDI R20,0X00
 OUT TCCR1A, R20
 OUT TCCR1B,R20
 LDI R20,0X04
 OUT TIFR,R20
 RET 


 ADCISR:
SBI ADCSRA,ADIF/* RESET THE FLAG FOR THE NEXT CONVERSION*/
IN R16,ADCH
CALL CVTHEX /* FUNCTION THAT TAKE THE INPUT CONVERT TO THE FORM TO DISPLAY ON LCD*/
LDI R16,'.'
CALL DATAWRT
LDI R16,'C'
CALL DATAWRT
RETI 

 

CVTHEX:
/* STORING R16***/
MOV R18,R16
/*************CHECKING FOR LESS  THAN 10**********/
LDI R17,10
CP R16,R17
BRSH CON
CALL FINDNUMBER 
LPM R16,Z
CALL DATAWRT
RET 
CON: 
/*********** CHECKING FOR LESS THAN 19***********/
LDI R17,20
CP R16,R17
BRSH  CON1
LDI R16,'1'
CALL TRANSMIT
CALL DATAWRT
/**************CODE FOR LESS THAN 19**************/
SUBI R18,10
CPI R18,0
BRNE NOTZERO
LDI R16,'0'
CALL TRANSMIT
CALL DATAWRT
LDI R16,'N'
CALL TRANSMIT
RET 
NOTZERO: 
CALL FINDNUMBER
LPM R16,Z
CALL DATAWRT
RET 
CON1:
/************ CHECKING FOR LESS THAN 29*********/
LDI R17,30
CP R16,R17
BRSH  CON2
LDI R16,'2'
CALL TRANSMIT
CALL DATAWRT
/***************CODE FOR LESS THAN 29**************/
SUBI R18,20
CPI R18,0
BRNE NOTZERO1
LDI R16,'0'
CALL TRANSMIT
CALL DATAWRT
LDI R16,'N'
CALL TRANSMIT
RET
NOTZERO1: 
CALL FINDNUMBER
LPM R16,Z
CALL DATAWRT
RET 
CON2:
/***************CHECKING FOR LESS THAN 39****************/
LDI R17,40
CP R16,R17
BRSH  CON3
LDI R16,'3'
CALL TRANSMIT
CALL DATAWRT
SUBI R18,30
CPI R18,0
BRNE NOTZERO2
LDI R16,'0'
CALL TRANSMIT
CALL DATAWRT
LDI R16,'N'
CALL TRANSMIT
RET
NOTZERO2: 
CALL FINDNUMBER
LPM R16,Z
CALL DATAWRT
RET 
CON3:
/***************CHECKING FOR LESS THAN 49****************/
LDI R17,50
CP R16,R17
BRSH  CON4
LDI R16,'4'
CALL TRANSMIT
CALL DATAWRT
SUBI R18,40
CPI R18,0
BRNE NOTZERO3
LDI R16,'0'
CALL TRANSMIT
CALL DATAWRT
LDI R16,'N'
CALL TRANSMIT
RET
NOTZERO3: 
CALL FINDNUMBER
LPM R16,Z
CALL DATAWRT
RET 
CON4:
/***************CHECKING FOR LESS THAN 59****************/
LDI R17,60
CP R16,R17
BRSH  CON5
LDI R16,'5'
CALL TRANSMIT
CALL DATAWRT
SUBI R18,50
CPI R18,0
BRNE NOTZERO4
LDI R16,'0'
CALL TRANSMIT
CALL DATAWRT
LDI R16,'N'
CALL TRANSMIT
RET
NOTZERO4: 
CALL FINDNUMBER
LPM R16,Z
CALL DATAWRT
RET 
CON5:
RET

FINDNUMBER:
LDI ZH,HIGH(NUMBERS<<1)
LDI ZL,LOW(NUMBERS<<1)
LDI R16,1
AG:
CP R18,R16
BRNE AG1
LPM R16,Z
CALL TRANSMIT
LDI R16,'N'
CALL TRANSMIT
RET
AG1:
INC ZL
DEC R18
JMP AG 

NUMBERS:
.DB '1','2','3','4','5','6','7','8','9'
TRANSMIT:
SBIS UCSRA,UDRE
JMP TRANSMIT
OUT UDR,R16
RET
SERIALCOM_init:
/*RECEIVING BITS SERIALLY WITH COMPLETLY INTRUPT BASED*/
/*STEP 1 SET THE UCSRB*/
LDI R16,(1<<RXEN)|(1<<RXCIE)|(1<<TXEN)
OUT UCSRB,R16
/*STEP 2 SET THE UCSRC REGISTER*/
LDI R16,(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL)
OUT UCSRC,R16
SEI 
/* STEP 3 SETING THE BAUDRATE*/
LDI R16,0X33
OUT UBRRL,R16
RET 